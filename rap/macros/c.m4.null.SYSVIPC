divert(-1)
define(NEWPROC,) dnl

define(BARRIER, `{
    int cnt;
    int bar;
    int lock;
    int members;
    struct sembuf up;
    struct sembuf down;
    int cnt_key = ($1).cnt;
    int bar_key = ($1).bar;
    int lock_key = ($1).lock;
    cnt = splash_map[cnt_key];
    bar = splash_map[bar_key];
    lock = splash_map[lock_key];
    memset(&up, 0, sizeof(struct sembuf));
    memset(&down, 0, sizeof(struct sembuf));
    up.sem_op = 1;
    down.sem_op = -1;
    splash_log("barrier: *--  step 0  --* (lock=%d)\n", lock_key);
    if ($2 > 1) {
        if (semop(lock, &down, 1) < 0) {
            splash_log("barrier: failed to lock (key=%d)\n", lock_key);
            exit(-1);
        }
        splash_log("barrier: *--  step 1  --* (lock=%d)\n", lock_key);
        members = semctl(cnt, 0, GETVAL, 0);
        if (members < 0) {
            splash_log("barrier: failed to get counter (key=%d)\n", cnt_key);
            exit(-1);
        }
        splash_log("barrier: *--  step 2  --* (members=%d, lock=%d)\n", members, lock_key);
        if (members < $2 - 1) {
            if (semop(cnt, &up, 1) < 0) {
                splash_log("barrier: failed to update counter (key=%d)\n", cnt_key);
                exit(-1);
            }
        } else {
            union semun semun;
            semun.val = 0;
            if (semctl(cnt, 0, SETVAL, semun) < 0) {
                splash_log("barrier: failed to reset counter (key=%d)\n", cnt_key);
                exit(-1);
            }
            semun.val = $2 - 1;
            if (semctl(bar, 0, SETVAL, semun) < 0) {
                splash_log("barrier: failed to wakeup (key=%d)\n", bar_key);
                exit(-1);
            }
        }
        splash_log("barrier: *--  step 3  --* (lock=%d)\n", lock_key);
        if (semop(lock, &up, 1) < 0) {
            splash_log("barrier: failed to unlock (key=%d)\n", lock_key);
            exit(-1);
        }
        splash_log("barrier: *--  step 4  --* (lock=%d)\n", lock_key);
        if (members < $2 - 1) {
            if (semop(bar, &down, 1) < 0) {
                splash_log("barrier: failed to wait (key=%d)\n", bar_key);
                exit(-1);
            }
        }
    }
    splash_log("barrier: *-- finished --* (lock=%d)\n", lock_key);
}')

define(BARDEC, `
struct {
    int cnt;
    int bar;
    int lock;
} ($1);
')

define(BARINIT, `{
    int id;
    union semun semun;
    semun.val = 0;
    if (splash_bar_key >= SPLASH_BAR_KEY + SPLASH_KEY_MAX) {
        splash_log("barinit: invalid key %d\n", splash_bar_key);
        exit(-1);
    }
    id = semget(splash_bar_key, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
    if (id < 0) {
        id = semget(splash_bar_key, 1, SPLASH_IPC_FLAGS);
        if (id < 0) {
            splash_log("barinit: failed to create\n");
            exit(-1);
        }
    } else {
        if (semctl(id, 0, SETVAL, semun) < 0) {
            splash_log("barinit: failed initialize\n");
            exit(-1);
        }
    }
    splash_log("barinit: cnt=%d\n", splash_bar_key);
    splash_map[splash_bar_key] = id;
    $1.cnt = splash_bar_key;
    splash_bar_key++;
    
    if (splash_bar_key >= SPLASH_BAR_KEY + SPLASH_KEY_MAX) {
        splash_log("barinit: invalid key %d\n", splash_bar_key);
        exit(-1);
    }
    id = semget(splash_bar_key, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
    if (id < 0) {
        id = semget(splash_bar_key, 1, SPLASH_IPC_FLAGS);
        if (id < 0) {
            splash_log("barinit: failed to create\n");
            exit(-1);
        }
    } else {
        semun.val = 0;
        if (semctl(id, 0, SETVAL, semun) < 0) {
            splash_log("barinit: failed initialize\n");
            exit(-1);
        }
    }
    splash_log("barinit: bar=%d\n", splash_bar_key);
    splash_map[splash_bar_key] = id;
    $1.bar = splash_bar_key;
    splash_bar_key++;
    
    if (splash_bar_key >= SPLASH_BAR_KEY + SPLASH_KEY_MAX) {
        splash_log("barinit: invalid key %d\n", splash_bar_key);
        exit(-1);
    }
    id = semget(splash_bar_key, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
    if (id < 0) {
        id = semget(splash_bar_key, 1, SPLASH_IPC_FLAGS);
        if (id < 0) {
            splash_log("barinit: failed to create\n");
            exit(-1);
        }
    } else {
        semun.val = 1;
        if (semctl(id, 0, SETVAL, semun) < 0) {
            splash_log("barinit: failed to initialize\n");
            exit(-1);
        }
    }
    splash_log("barinit: lock=%d\n", splash_bar_key);
    splash_map[splash_bar_key] = id;
    $1.lock = splash_bar_key;
    splash_bar_key++;
}')

define(BAREXCLUDE, `{;}')

define(BARINCLUDE, `{;}')

define(GSDEC, `long ($1);')
define(GSINIT, `{ ($1) = 0; }')
define(GETSUB, `{
    if (($1)<=($3))
        ($2) = ($1)++;
    else {
        ($2) = -1;
        ($1) = 0;
    }
}')

define(NU_GSDEC, `long ($1);')
define(NU_GSINIT, `{ ($1) = 0; }')
define(NU_GETSUB, `GETSUB($1,$2,$3,$4)')

define(ADEC, `long ($1);')
define(AINIT, `{;}')
define(PROBEND, `{;}')

define(LOCKDEC, `int ($1);')
define(LOCKINIT, `{
    int id;
    if (splash_lock_key >= SPLASH_LOCK_KEY + SPLASH_KEY_MAX) {
        splash_log("lockinit: invalid key %d\n", splash_lock_key);
        exit(-1);
    }
    id = semget(splash_lock_key, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
    if (id < 0) {
        id = semget(splash_lock_key, 1, SPLASH_IPC_FLAGS);
        if (id < 0) {
            splash_log("lockinit: failed (key=%d)\n", splash_lock_key);
            exit(-1);
        }
    } else {
        union semun semun;
        semun.val = 1;
        if (semctl(id, 0, SETVAL, semun) < 0){
            splash_log("lockinit: failed (key=%d)\n", splash_lock_key);
            exit(-1);
        }
    }
    ($1) = splash_lock_key;
    splash_map[splash_lock_key] = id;
    splash_lock_key++;
}')

define(LOCK, `{
    int key = $1;
    int lock = splash_map[key];
    struct sembuf down;
    splash_log("lock: start (key=%d)\n", key);
    if (key < SPLASH_LOCK_KEY || key >= SPLASH_LOCK_KEY + SPLASH_KEY_MAX) {
        splash_log("lock: invalid key %d\n", key);
        exit(-1);
    }
    memset(&down, 0, sizeof(struct sembuf));
    down.sem_op = -1;
    if (semop(lock, &down, 1) < 0) {
        splash_log("lock: failed (key=%d)\n", key);
        exit(-1);
    }
    splash_log("lock: finished (key=%d)\n", key);
}')

define(UNLOCK, `{
    int key = $1;
    int lock = splash_map[key];
    struct sembuf up;
    splash_log("unlock: start (key=%d)\n", key);
    if (key < SPLASH_LOCK_KEY || key >= SPLASH_LOCK_KEY + SPLASH_KEY_MAX) {
        splash_log("unlock: invalid key %d\n", key);
        exit(-1);
    }
    memset(&up, 0, sizeof(struct sembuf));
    up.sem_op = 1;
    if (semop(lock, &up, 1) < 0) {
        splash_log("unlock: failed (key=%d)\n", key);
        exit(-1);
    }
    splash_log("unlock: finished (key=%d)\n", key);
}')

define(NLOCKDEC, `long ($1);')
define(NLOCKINIT, `{;}')
define(NLOCK, `{;}')
define(NUNLOCK, `{;}')

define(ALOCKDEC, `int $1[$2];')
define(ALOCKINIT, `{
    unsigned long i;
    for (i = 0; i < $2; i++) {
        int id;
        if (splash_alock_key >= SPLASH_ALOCK_KEY + SPLASH_KEY_MAX) {
            splash_log("alockinit: invalid key %d\n", splash_alock_key);
            exit(-1);
        }
        id = semget(splash_alock_key, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
        if (id < 0) {
            id = semget(splash_alock_key, 1, SPLASH_IPC_FLAGS);
            if (id < 0) {
                splash_log("alockinit: failed (key=%d)\n", splash_alock_key);
                exit(-1);
            }
        } else {
            union semun semun;
            semun.val = 1;
            if (semctl(id, 0, SETVAL, semun) < 0) {
                splash_log("alockinit: failed (key=%d)\n", splash_alock_key);
                exit(-1);
            }
        }
        splash_map[splash_alock_key] = id;
        $1[i] = splash_alock_key;
        splash_alock_key++;
    }
}')

define(ALOCK, `{
    struct sembuf down;
    int key = $1[$2];
    if (key < SPLASH_ALOCK_KEY || key >= SPLASH_ALOCK_KEY + SPLASH_KEY_MAX) {
        splash_log("alock: invalid key %d\n", key);
        exit(-1);
    }
    memset(&down, 0, sizeof(struct sembuf));
    down.sem_op = -1;
    if (semop(splash_map[key], &down, 1) < 0) {
        splash_log("alock: failed (key=%d)\n", key);
        exit(-1);
    }
}')

define(AULOCK, `{
    struct sembuf up;
    int key = $1[$2];
    if (key < SPLASH_ALOCK_KEY || key >= SPLASH_ALOCK_KEY + SPLASH_KEY_MAX) {
        splash_log("aulock: invalid key %d\n", key);
        exit(-1);
    }
    memset(&up, 0, sizeof(struct sembuf));
    up.sem_op = 1;
    if (semop(splash_map[key], &up, 1) < 0) {
        splash_log("aulock: failed (key=%d)\n", key);
        exit(-1);
    }
}')

define(PAUSEDEC, `struct {
    int cnt;
    int sem;
    int lock;
} ($1);')

define(PAUSEINIT, `{
    int id;
    union semun semun;
    
    if (splash_pause_key >= SPLASH_PAUSE_KEY + SPLASH_KEY_MAX) {
        splash_log("pauseinit: invalid key %d\n", splash_pause_key);
        exit(-1);
    }
    id = semget(splash_pause_key, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
    if (id < 0) {
        id = semget(splash_pause_key, 1, SPLASH_IPC_FLAGS);
        if (id < 0) {
            splash_log("pauseinit: failed to create (key=%d)\n", splash_pause_key);
            exit(-1);
        }
    } else {
        semun.val = 1;
        if (semctl(id, 0, SETVAL, semun) < 0) {
            splash_log("pauseinit: failed to create (key=%d)\n", splash_pause_key);
            exit(-1);
        }
    }
    splash_map[splash_pause_key] = id;
    ($1).sem = splash_pause_key;
    splash_pause_key++;
    
    if (splash_pause_key >= SPLASH_PAUSE_KEY + SPLASH_KEY_MAX) {
        splash_log("pauseinit: invalid key %d\n", splash_pause_key);
        exit(-1);
    }
    id = semget(splash_pause_key, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
    if (id < 0) {
        id = semget(splash_pause_key, 1, SPLASH_IPC_FLAGS);
        if (id < 0) {
            splash_log("pauseinit: failed to create (key=%d)\n", splash_pause_key);
            exit(-1);
        }
    } else {
        semun.val = 1;
        if (semctl(id, 0, SETVAL, semun) < 0) {
            splash_log("pauseinit: failed to create (key=%d)\n", splash_pause_key);
            exit(-1);
        }
    }
    splash_map[splash_pause_key] = id;
    ($1).lock = splash_pause_key;
    splash_pause_key++;
    
    if (splash_pause_key >= SPLASH_PAUSE_KEY + SPLASH_KEY_MAX) {
        splash_log("pauseinit: invalid key %d\n", splash_pause_key);
        exit(-1);
    }
    id = semget(splash_pause_key, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
    if (id < 0) {
        id = semget(splash_pause_key, 1, SPLASH_IPC_FLAGS);
        if (id < 0) {
            splash_log("pauseinit: failed to create (key=%d)\n", splash_pause_key);
            exit(-1);
        }
    } else {
        semun.val = 0;
        if (semctl(id, 0, SETVAL, semun) < 0) {
            splash_log("pauseinit: failed to create (key=%d)\n", splash_pause_key);
            exit(-1);
        }
    }
    splash_map[splash_pause_key] = id;
    ($1).cnt = splash_pause_key;
    splash_pause_key++;
}')

define(CLEARPAUSE, `{;}')

define(SETPAUSE, `{
    union semun semun;
    int key = ($1).sem;
    int sem = splash_map[key];
    splash_log("setpause: *--  step 0  --* (sem=%d)\n", key);
    semun.val = 0;
    if (semctl(sem, 0, SETVAL, semun) < 0) {
        splash_log("setpause: failed to set (sem=%d)\n", key);
        exit(-1);
    }
    splash_log("setpause: *-- finished --* (sem=%d)\n", key);
}')

define(EVENT, `{;}')

define(WAITPAUSE, `{
    int members;
    struct sembuf s;
    int cnt_key = ($1).cnt;
    int sem_key = ($1).sem;
    int lock_key = ($1).lock;
    int cnt = splash_map[cnt_key];
    int sem = splash_map[sem_key];
    int lock = splash_map[lock_key];
    memset(&s, 0, sizeof(struct sembuf));
    splash_log("waitpause: *--  step 0  --* (sem=%d)\n", sem_key);
    s.sem_op = 1;
    if (semop(cnt, &s, 1) < 0) {
        splash_log("waitpause: failed to count (sem=%d)\n", sem_key);
        exit(-1);
    }
    splash_log("waitpause: *--  step 1  --* (sem=%d)\n", sem_key);
    s.sem_op = 0;
    if (semop(sem, &s, 1) < 0) {
        splash_log("waitpause: failed to wait (sem=%d)\n", sem_key);
        exit(-1);
    }
    splash_log("waitpause: *--  step 2  --* (sem=%d)\n", sem_key);
    s.sem_op = -1;
    if (semop(lock, &s, 1) < 0) {
        splash_log("waitpause: failed to lock (sem=%d)\n", sem_key);
        exit(-1);
    }
    splash_log("waitpause: *--  step 3  --* (sem=%d)\n", sem_key);
    members = semctl(cnt, 0, GETVAL, 0);
    if (members <= 0) {
        splash_log("barrier: failed to get members (sem=%d)\n", sem_key);
        exit(-1);
    }
    splash_log("waitpause: *--  step 4  --* (sem=%d)\n", sem_key);
    if (semop(cnt, &s, 1) < 0) {
        splash_log("waitpause: failed to update counter (sem=%d)\n", sem_key);
        exit(-1);
    }
    splash_log("waitpause: *--  step 5  --* (sem=%d)\n", sem_key);
    s.sem_op = 1;
    if (semop(lock, &s, 1) < 0) {
        splash_log("waitpause: failed to unlock (sem=%d)\n", sem_key);
        exit(-1);
    }
    splash_log("waitpause: *--  step 6  --* (sem=%d)\n", sem_key);
    if (members == 1) {
        union semun semun;
        semun.val = 1;
        if (semctl(sem, 0, SETVAL, semun) < 0) {
            splash_log("setpause: failed to signal (sem=%d)\n", sem_key);
            exit(-1);
        }
    }
    splash_log("waitpause: *-- finished --* (sem=%d)\n", sem_key);
}')

define(PAUSE, `{;}')

define(AUG_ON, ` ')
define(AUG_OFF, ` ')
define(TRACE_ON, ` ')
define(TRACE_OFF, ` ')
define(REF_TRACE_ON, ` ')
define(REF_TRACE_OFF, ` ')
define(DYN_TRACE_ON, `;')
define(DYN_TRACE_OFF, `;')
define(DYN_REF_TRACE_ON, `;')
define(DYN_REF_TRACE_OFF, `;')
define(DYN_SIM_ON, `;')
define(DYN_SIM_OFF, `;')
define(DYN_SCHED_ON, `;')
define(DYN_SCHED_OFF, `;')
define(AUG_SET_LOLIMIT, `;')
define(AUG_SET_HILIMIT, `;')
define(MENTER, `{;}')
define(DELAY, `{;}')
define(CONTINUE, `{;}')
define(MEXIT, `{;}')
define(MONINIT, `{;}')

define(WAIT_FOR_END, `{
    // FILE *fp;
    // fflush(stdout);
    // fp = fopen("/tmp/.splash_wait_for_end", "w");
    // fclose(fp);
    // while (!access("/tmp/.splash_wait_for_end", F_OK))
    //    sleep(1);
}')

define(CREATE, `{
    int i;
    int id;
    struct sembuf s;
    int key = SPLASH_NODE_KEY;
    memset(&s, 0, sizeof(struct sembuf));
    splash_log("create: start ...\n");
    if (($2) > SPLASH_THREAD_MAX) {
        splash_log("create: too much threads\n");
        exit(-1);
    }
    id = semget(SPLASH_CREATE_KEY, 1, SPLASH_IPC_FLAGS | IPC_EXCL);
    if (id < 0) {
        id = semget(SPLASH_CREATE_KEY, 1, SPLASH_IPC_FLAGS);
        if (id < 0) {
            splash_log("create: failed (key=%d)\n", SPLASH_CREATE_KEY);
            exit(-1);
        }
        if (semop(id, &s, 1) < 0) {
            splash_log("create: failed (key=%d)\n", SPLASH_CREATE_KEY);
            exit(-1);
        }
    } else {
        union semun semun;
        semun.val = 0;
        if (semctl(id, 0, SETVAL, semun) < 0) {
            splash_log("create: failed (key=%d)\n", SPLASH_CREATE_KEY);
            exit(-1);
        }
    }
    for (i = 0; i < ($2); i++) {
        if (semget(key, 1, SPLASH_IPC_FLAGS | IPC_EXCL) >= 0) {
            splash_node_id = i + 1;
            if (i == ($2) - 1) {
                s.sem_op = ($2) - 1;
                splash_log("create: wakeup nodes\n");
                if (semop(id, &s, 1) < 0) {
                    splash_log("create: failed (node=%d)\n", splash_node_id);
                    exit(-1);
                }
            } else {
                s.sem_op = -1;
                if (semop(id, &s, 1) < 0) {
                    splash_log("create: failed (node=%d)\n", splash_node_id);
                    exit(-1);
                }
            }
            break;
        }
        key++;
    }
    splash_log("create: finished\n");
    $1();
}')

define(MAIN_INITENV, `{;}')

define(MAIN_END, `{
    FILE *fp;
    fflush(stdout);
    fp = fopen("/tmp/.splash_main_end", "w");
    fclose(fp);
    while (!access("/tmp/.splash_main_end", F_OK))
        sleep(1);
}')

define(MAIN_ENV,`
#define _GNU_SOURCE
#include <sys/sem.h>
#include <sys/shm.h>
#include <sys/time.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define SPLASH_MEM_KEY	       2000
#define SPLASH_BAR_KEY         2200
#define SPLASH_NODE_KEY	       2400
#define SPLASH_LOCK_KEY        2600
#define SPLASH_ALOCK_KEY       2800
#define SPLASH_PAUSE_KEY       3000
#define SPLASH_CREATE_KEY      3200

#define SPLASH_KEY_MAX         128
#define SPLASH_THREAD_MAX      128

#define SPLASH_IPC_FLAGS       00010000 | IPC_CREAT | 0777

// #define SPLASH_DEBUG_MODE

int splash_mem_key   = SPLASH_MEM_KEY;
int splash_bar_key   = SPLASH_BAR_KEY;
int splash_lock_key  = SPLASH_LOCK_KEY;
int splash_alock_key = SPLASH_ALOCK_KEY;
int splash_pause_key = SPLASH_PAUSE_KEY;

int splash_node_id;
int splash_map[4096];

#ifndef SEMUN
#define SEMUN
union semun {
    int val;                /* value for SETVAL */
    struct semid_ds *buf;   /* buffer for IPC_STAT & IPC_SET */
    unsigned short *array;  /* array for GETALL & SETALL */
    struct seminfo *__buf;  /* buffer for IPC_INFO */
};
#endif

#ifndef SPLASH_LOG
#define SPLASH_LOG
#ifdef SPLASH_DEBUG_MODE
#define splash_log printf
#else
#define splash_log(...) do {} while (0)
#endif
#endif

#ifndef SHMALLOC
#define SHMALLOC
static inline void *shmalloc(unsigned long size)
{
    void *buf;
    int shmid;
    if (splash_mem_key >= SPLASH_MEM_KEY + SPLASH_KEY_MAX) {
        splash_log("shmalloc: invalid key %d\n", splash_mem_key);
        exit(-1);
    }
    size = (size + 7) / 8 * 8;
    shmid = shmget(splash_mem_key, size, SPLASH_IPC_FLAGS);
    if (shmid < 0) {
        splash_log("shmalloc: failed (key=%d)\n", splash_mem_key);
        exit(-1);
    }
    buf = shmat(shmid, NULL, 0);
    if ((buf == (void *)-1) || !buf) {
        splash_log("shmalloc: failed (key=%d)\n", splash_mem_key);
        exit(-1);
    }
    // memset(buf, 0, size);
    splash_map[splash_mem_key] = shmid;
    splash_log("shmalloc: key=%d\n", splash_mem_key);
    splash_mem_key++;
    return buf;
}
#endif
')

define(ENV, `')
define(EXTERN_ENV, `
#include <sys/sem.h>
#include <sys/shm.h>
#include <sys/time.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define SPLASH_MEM_KEY	       2000
#define SPLASH_BAR_KEY         2200
#define SPLASH_NODE_KEY	       2400
#define SPLASH_LOCK_KEY        2600
#define SPLASH_ALOCK_KEY       2800
#define SPLASH_PAUSE_KEY       3000
#define SPLASH_CREATE_KEY      3200

#define SPLASH_KEY_MAX         128
#define SPLASH_THREAD_MAX      128

#define SPLASH_IPC_FLAGS       00010000 | IPC_CREAT | 0777

// #define SPLASH_DEBUG_MODE

extern int splash_map[];
extern int splash_bar_key;
extern int splash_mem_key;
extern int splash_node_id;
extern int splash_lock_key;
extern int splash_alock_key;
extern int splash_pause_key;

#ifndef SEMUN
#define SEMUN
union semun {
    int val;                /* value for SETVAL */
    struct semid_ds *buf;   /* buffer for IPC_STAT & IPC_SET */
    unsigned short *array;  /* array for GETALL & SETALL */
    struct seminfo *__buf;  /* buffer for IPC_INFO */
};
#endif

#ifndef SPLASH_LOG
#define SPLASH_LOG
#ifdef SPLASH_DEBUG_MODE
#define splash_log printf
#else
#define splash_log(...) do {} while (0)
#endif
#endif

#ifndef SHMALLOC
#define SHMALLOC
static inline void *shmalloc(unsigned long size)
{
    void *buf;
    int shmid;
    if (splash_mem_key >= SPLASH_MEM_KEY + SPLASH_KEY_MAX) {
        splash_log("shmalloc: invalid key %d\n", splash_mem_key);
        exit(-1);
    }
    size = (size + 7) / 8 * 8;
    shmid = shmget(splash_mem_key, size, SPLASH_IPC_FLAGS);
    if (shmid < 0) {
        splash_log("shmalloc: failed (key=%d)\n", splash_mem_key);
        exit(-1);
    }
    buf = shmat(shmid, NULL, 0);
    if ((buf == (void *)-1) || !buf) {
        splash_log("shmalloc: failed (key=%d)\n", splash_mem_key);
        exit(-1);
    }
    // memset(buf, 0, size);
    splash_map[splash_mem_key] = shmid;
    splash_mem_key++;
    return buf;
}
#endif
')

define(G_MALLOC, `shmalloc($1);')
define(G_FREE, `;')
define(G_MALLOC_F, `;')
define(NU_MALLOC, `shmalloc($1);')
define(NU_FREE, `;')
define(NU_MALLOC_F, `;')
define(GET_HOME, `{($1) = 0;}')
define(GET_PID, `{($1) = 0;}')
define(AUG_DELAY, `{sleep ($1);}')
define(ST_LOG, `{;}')
define(SET_HOME, `{;}')

define(CLOCK, `{
    struct timeval time;
    gettimeofday(&time, NULL);
    ($1) = (unsigned long)(time.tv_usec + time.tv_sec * 1000000);
}')

divert(0)
